@using LChat.GUI.ChatService
@using LChat.GUI.Data
@using Microsoft.AspNetCore.Components.Forms
@using Markdig;

@implements IDisposable

@inject IJSRuntime JSRuntime
@inject IChatService ChatService


<div class="container vh-100">
    <div class="row justify-content-center h-100">
        <div class="col-10 d-flex flex-column h-100">
            <!-- MESSAGES -->
            <div class="flex-grow-1 overflow-x-hidden overflow-y-auto mb-3 pb-5 text-wrap text-break">
                @foreach (var message in _messages)
                {
                    <div class="pb-3" @key="message.GetHashCode()">
                        <div class="d-flex align-items-center">
                            <i class="bi @(GetIconClass(message.Type)) me-2"></i>
                            <small class="text-muted me-2">@message.Timestamp.ToString("HH:mm")</small>
                        </div>
                        <div class="@(GetTextColor(message.Type))" >
                            @((MarkupString)message.Content)
                        </div>
                    </div>
                }
                <div style="display: @(_showLoading ? "block" : "none")">
                    <small class="text-muted me-2">@_loadingMessage</small>
                </div>
            </div>

            <!-- INPUT AREA -->
            <div class="align-bottom bg-body pb-3">
                <EditForm Model="this" OnValidSubmit="SendMessage">
                    <div class="input-group border rounded">
                        <textarea class="form-control shadow-none border-0 bg-transparent"
                        style="resize: none"
                        @bind="_currentMessage"
                        rows="@_rows"
                        placeholder="Type your message..."
                        @ref="_textArea"
                        disabled="@_showLoading"
                        @oninput="OnInput"
                        @onkeydown="HandleKeyPress"></textarea>
                        <button type="submit"
                        @ref="_submitButton"
                        class="btn bg-transparent border-0 shadow-none text-white">
                            <i class="bi bi-send"></i>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code 
{
    const int MAX_ROWS = 6;
    const int INITIAL_ROWS = 2;
    const int MAX_LINE_LENGHT = 60;
    const int LOADING_REFRESH_DELAY = 333;

    private List<Message> _messages = new();
    private string _currentMessage = string.Empty;
    private ElementReference _submitButton;
    private ElementReference _textArea;
    private int _rows = INITIAL_ROWS;
    private bool _showLoading = false;
    private CancellationTokenSource _cancellationTokenSource = new();
    private string _loadingMessage = string.Empty;

    private readonly static string[] LoadingSymbols = 
    {
        string.Empty,
        ".",
        "..",
        "..."
    };

    protected override async Task OnInitializedAsync()
    {
        ChatService.MessageReceived += OnMessageReceived;
        await ChatService.StartAsync();
        await base.OnInitializedAsync();
    }

    private int Rows
    {
        get => _rows;
        set
        {
            if (value < INITIAL_ROWS)
            {
                _rows = INITIAL_ROWS;
                return;
            }

            if (value > MAX_ROWS)
            {
                _rows = MAX_ROWS;

                return;
            }

            _rows = value;
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        var text = e.Value?.ToString() ?? string.Empty;
        Rows = text.Length / MAX_LINE_LENGHT;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_currentMessage))
        {
            await _textArea.FocusAsync();

            return;
        }

        var messageToSend = _currentMessage;
        _currentMessage = string.Empty;
        var htmlText = Markdown.ToHtml(messageToSend);
        _messages.Add(new Message(MessageType.Client, htmlText, DateTime.Now));
        Rows = INITIAL_ROWS;
        _ = ShowLoading();
        await ChatService.SendMessageAsync(messageToSend);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (e.ShiftKey)
            {
                Rows++;
                return;
            }
            await _submitButton.FocusAsync();
            await JSRuntime.InvokeVoidAsync("HTMLElement.prototype.click.call", _submitButton);
        }
    }

    private string GetIconClass(MessageType type) => type switch
    {
        MessageType.LLM => "bi-robot",
        MessageType.Client => "bi-person",
        MessageType.Meta =>  "bi-info-square",
        MessageType.Log => "bi-info-square",
        MessageType.Error => "bi-bug",
        _ => ""
    };

    private string GetTextColor(MessageType type) => type switch
    {
        MessageType.Error => "text-danger",
        MessageType.Log => "text-primary",
        MessageType.Meta => "text-success",
        _ => "text-light"
    };

    private void OnMessageReceived(Message message)
    {
        _messages.Add(message);
        StateHasChanged();
        if (_showLoading)
        {
            _cancellationTokenSource.Cancel();
        }
    }

    private async Task ShowLoading()
    {
        _showLoading = true;
        var i = 0;
        try
        {
            while (!_cancellationTokenSource.Token.IsCancellationRequested)
            {
                _loadingMessage = LoadingSymbols[i];
                i++;
                if (i >= LoadingSymbols.Length)
                {
                    i = 0;
                }
                StateHasChanged();
                await Task.Delay(LOADING_REFRESH_DELAY, _cancellationTokenSource.Token);
            }
        }
        finally
        {
            _cancellationTokenSource = new CancellationTokenSource();  
            _showLoading = false;
            StateHasChanged();
            await _textArea.FocusAsync();
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }
}