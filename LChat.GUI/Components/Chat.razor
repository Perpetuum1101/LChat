@using LChat.GUI.Data
@using Microsoft.AspNetCore.Components.Forms

<div class="container vh-100">
    <div class="row justify-content-center h-100">
        <div class="col-10 d-flex flex-column h-100">
            <!-- MESSAGES -->
            <div class="flex-grow-1 overflow-auto mb-3 pb-5">
                @foreach (var message in _messages)
                {
                    <div class="pb-3">
                        <div class="d-flex align-items-center">
                            <i class="bi @(GetIconClass(message.Type)) me-2"></i>
                            <small class="text-muted me-2">@message.Timestamp.ToString("HH:mm")</small>
                        </div>
                        <div class="@(GetTextColor(message.Type))">@message.Content</div>
                    </div>
                }
            </div>

            <!-- INPUT AREA -->
            <div class="align-bottom bg-body pb-3">
                <EditForm Model="this" OnValidSubmit="SendMessage">
                    <div class="input-group border rounded">
                        <textarea class="form-control shadow-none border-0 bg-transparent"
                                  style="resize: none"
                                  @bind="_currentMessage"
                                  rows="2"
                                  placeholder="Type your message..."></textarea>
                        <button type="submit"
                                class="btn bg-transparent border-0 shadow-none text-white">
                            <i class="bi bi-send"></i>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    private List<Message> _messages = new();
    private string _currentMessage = string.Empty;

    private void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(_currentMessage))
        {
            _messages.Add(new Message(MessageType.Client, _currentMessage, DateTime.Now));
            _currentMessage = string.Empty;
        }
    }

    private string GetIconClass(MessageType type) => type switch
    {
        MessageType.LLM => "bi-robot",
        MessageType.Client => "bi-person",
        _ => ""
    };

    private string GetTextColor(MessageType type) => type switch
    {
        MessageType.Error => "text-danger",
        MessageType.Log => "text-primary",
        MessageType.Meta => "text-warning",
        _ => "text-light"
    };
}
